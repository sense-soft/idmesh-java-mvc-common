plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

java {
    withSourcesJar()
    withJavadocJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

def properties = new Properties()
properties.load(new FileInputStream(file('version.properties')))

group = 'cn.idmesh.sdk'
version = properties.getProperty('version')
description = 'idmesh-java-mvc-common'
java.sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}


dependencies {
    testImplementation 'junit:junit:4.13.2'

    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    api 'org.apache.commons:commons-lang3:3.12.0'
    api 'org.bitbucket.b_c:jose4j:0.9.3'
    api 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
    api 'org.apache.httpcomponents.client5:httpclient5-fluent:5.2.1'
    api 'com.google.code.gson:gson:2.9.1'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = project.getGroup()
            artifactId = project.getName()
            version = project.getVersion()

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = project.getName()
                description = project.getDescription()
                url = ''
                properties = [
                        'project.build.sourceEncoding': 'UTF-8',
                        'project.reporting.outputEncoding': 'UTF-8',
                        'maven.compiler.source': '1.8',
                        'maven.compiler.target': '1.8'
                ]
                developers {
                    developer {
                        id = 'Liur'
                        name = "Liur"
                        email = "liuyafei.cf@163.com"
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:sense-soft/idmesh-java-mvc-common.git'
                    developerConnection = 'scm:git:ssh://github.com:sense-soft/idmesh-java-mvc-common.git'
                    url = 'https://github.com/sense-soft/idmesh-java-mvc-common'
                }
            }
        }
    }

    repositories {
        maven {
            name = 'idmesh-java-mvc-common'
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                // 这里就是之前在issues.sonatype.org注册的账号
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PWD")
            }
        }
    }
}

signing {
    def signingKey = base64Decode(findProperty("base64EncodedAsciiArmoredSigningKey"))
    def signingPassword = findProperty("signingPassword")
    def signingKeyId = findProperty("signingKeyId")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

static def base64Decode(encodedString){
    if(encodedString != null) {
        byte[] decoded = encodedString.decodeBase64()
        String decode = new String(decoded)
        return decode
    }
    return null;
}

javadoc {
    options.encoding = "UTF-8"
    failOnError = false
}